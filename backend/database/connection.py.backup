# database/connection.py - Complete version with all methods
from supabase import create_client, Client
from config import settings
import asyncio
from typing import Optional, Dict, Any, List
import json
from datetime import datetime

class DatabaseConnection:
    """Handles all database operations for IntelliApply"""
    
    def __init__(self):
        self.supabase: Client = create_client(
            settings.supabase_url,
            settings.supabase_service_key
        )
    
    # User operations
    async def create_user(self, user_data: dict) -> dict:
        """Create a new user"""
        response = self.supabase.table('users').insert(user_data).execute()
        return response.data[0] if response.data else None
    
    async def get_user_by_email(self, email: str) -> Optional[dict]:
        """Get user by email"""
        response = self.supabase.table('users').select('*').eq('email', email).execute()
        return response.data[0] if response.data else None
    
    async def get_user_by_id(self, user_id: str) -> Optional[dict]:
        """Get user by ID"""
        response = self.supabase.table('users').select('*').eq('id', user_id).execute()
        return response.data[0] if response.data else None
    
    async def update_user(self, user_id: str, updates: dict) -> dict:
        """Update user data"""
        response = self.supabase.table('users').update(updates).eq('id', user_id).execute()
        return response.data[0] if response.data else None
    
    # User Profile operations
    async def create_profile(self, profile_data: dict) -> dict:
        """Create a new user profile"""
        response = self.supabase.table('user_profiles').insert(profile_data).execute()
        return response.data[0] if response.data else None
    
    async def get_user_profiles(self, user_id: str) -> List[dict]:
        """Get all profiles for a user"""
        response = self.supabase.table('user_profiles').select('*').eq('user_id', user_id).eq('is_active', True).execute()
        return response.data or []
    
    async def get_profile_by_id(self, profile_id: str) -> Optional[dict]:
        """Get profile by ID"""
        response = self.supabase.table('user_profiles').select('*').eq('id', profile_id).execute()
        return response.data[0] if response.data else None
    
    async def update_profile(self, profile_id: str, updates: dict) -> dict:
        """Update profile data"""
        response = self.supabase.table('user_profiles').update(updates).eq('id', profile_id).execute()
        return response.data[0] if response.data else None
    
    async def delete_profile(self, profile_id: str) -> bool:
        """Delete a profile (soft delete)"""
        response = self.supabase.table('user_profiles').update({'is_active': False}).eq('id', profile_id).execute()
        return len(response.data) > 0
    
    # Job Application operations
    async def create_application(self, app_data: dict) -> dict:
        """Create a new job application"""
        response = self.supabase.table('job_applications').insert(app_data).execute()
        return response.data[0] if response.data else None
    
    async def get_user_applications(self, user_id: str, limit: int = 50, offset: int = 0) -> List[dict]:
        """Get applications for a user"""
        response = (
            self.supabase.table('job_applications')
            .select('*')
            .eq('user_id', user_id)
            .order('created_at', desc=True)
            .range(offset, offset + limit - 1)
            .execute()
        )
        return response.data or []
    
    async def get_next_queued_application(self) -> Optional[dict]:
        """Get the next application to process"""
        try:
            response = self.supabase.rpc('get_next_queued_application').execute()
            return response.data[0] if response.data else None
        except:
            # Fallback if RPC doesn't exist
            response = (
                self.supabase.table('job_applications')
                .select('*')
                .eq('status', 'queued')
                .order('priority', desc=True)
                .order('created_at', desc=False)
                .limit(1)
                .execute()
            )
            return response.data[0] if response.data else None
    
    async def update_application_status(self, app_id: str, status: str, error_message: str = None) -> bool:
        """Update application status"""
        try:
            updates = {'status': status, 'updated_at': datetime.utcnow().isoformat()}
            if error_message:
                updates['error_message'] = error_message
            
            self.supabase.table('job_applications').update(updates).eq('id', app_id).execute()
            return True
        except Exception as e:
            print(f"Error updating application status: {e}")
            return False

    async def get_application_by_id(self, app_id: str) -> Optional[dict]:
        """Get application by ID"""
        response = self.supabase.table('job_applications').select('*').eq('id', app_id).execute()
        return response.data[0] if response.data else None

    async def get_applications_by_status(self, status: str, limit: int = 10) -> List[dict]:
        """Get applications by status"""
        try:
            response = (
                self.supabase.table('job_applications')
                .select('*')
                .eq('status', status)
                .order('priority', desc=True)
                .order('created_at', desc=False)
                .limit(limit)
                .execute()
            )
            return response.data or []
        except Exception as e:
            print(f"Error getting applications by status: {e}")
            return []
    
    # Batch operations
    async def create_batch(self, batch_data: dict) -> dict:
        """Create a new application batch"""
        response = self.supabase.table('application_batches').insert(batch_data).execute()
        return response.data[0] if response.data else None
    
    async def get_user_batches(self, user_id: str) -> List[dict]:
        """Get all batches for a user"""
        response = (
            self.supabase.table('application_batches')
            .select('*')
            .eq('user_id', user_id)
            .order('created_at', desc=True)
            .execute()
        )
        return response.data or []

    async def get_batch_by_id(self, batch_id: str) -> Optional[dict]:
        """Get batch by ID"""
        response = self.supabase.table('application_batches').select('*').eq('id', batch_id).execute()
        return response.data[0] if response.data else None
    
    async def update_batch_progress(self, batch_id: str, processed_count: int, successful_count: int, failed_count: int) -> bool:
        """Update batch progress"""
        try:
            updates = {
                'processed_count': processed_count,
                'successful_count': successful_count,
                'failed_count': failed_count,
                'updated_at': datetime.utcnow().isoformat()
            }
            
            self.supabase.table('application_batches').update(updates).eq('id', batch_id).execute()
            return True
        except Exception as e:
            print(f"Error updating batch progress: {e}")
            return False
    
    # CAPTCHA operations
    async def create_captcha_session(self, session_data: dict) -> dict:
        """Create a new CAPTCHA session"""
        response = self.supabase.table('captcha_sessions').insert(session_data).execute()
        return response.data[0] if response.data else None
    
    async def get_pending_captchas(self) -> List[dict]:
        """Get all pending CAPTCHA sessions"""
        response = (
            self.supabase.table('captcha_sessions')
            .select('*')
            .eq('status', 'pending')
            .order('created_at', desc=False)
            .execute()
        )
        return response.data or []

    async def get_captcha_session(self, session_id: str) -> Optional[dict]:
        """Get CAPTCHA session by ID"""
        response = self.supabase.table('captcha_sessions').select('*').eq('id', session_id).execute()
        return response.data[0] if response.data else None
    
    async def update_captcha_status(self, session_id: str, status: str, solved_by: str = None) -> bool:
        """Update CAPTCHA session status"""
        try:
            updates = {'status': status}
            if status == 'solved' and solved_by:
                updates['solved_at'] = datetime.utcnow().isoformat()
                updates['solved_by'] = solved_by
            
            self.supabase.table('captcha_sessions').update(updates).eq('id', session_id).execute()
            return True
        except Exception as e:
            print(f"Error updating CAPTCHA status: {e}")
            return False
    
    # Notification operations
    async def create_notification(self, notification_data: dict) -> dict:
        """Create a new notification"""
        try:
            response = self.supabase.table('notifications').insert(notification_data).execute()
            return response.data[0] if response.data else None
        except Exception as e:
            print(f"Error creating notification: {e}")
            return None
    
    async def get_user_notifications(self, user_id: str, unread_only: bool = False) -> List[dict]:
        """Get notifications for a user"""
        try:
            query = self.supabase.table('notifications').select('*').eq('user_id', user_id)
            
            if unread_only:
                query = query.eq('is_read', False)
            
            response = query.order('created_at', desc=True).execute()
            return response.data or []
        except Exception as e:
            print(f"Error getting user notifications: {e}")
            return []
    
    async def mark_notification_read(self, notification_id: str) -> bool:
        """Mark notification as read"""
        try:
            self.supabase.table('notifications').update({'is_read': True}).eq('id', notification_id).execute()
            return True
        except Exception as e:
            print(f"Error marking notification as read: {e}")
            return False

    async def pause_user_applications(self, user_id: str) -> int:
        """Pause all queued applications for a user"""
        try:
            response = (
                self.supabase.table('job_applications')
                .update({'status': 'paused'})
                .eq('user_id', user_id)
                .eq('status', 'queued')
                .execute()
            )
            return len(response.data) if response.data else 0
        except Exception as e:
            print(f"Error pausing applications: {e}")
            return 0

    async def resume_user_applications(self, user_id: str) -> int:
        """Resume all paused applications for a user"""
        try:
            response = (
                self.supabase.table('job_applications')
                .update({'status': 'queued'})
                .eq('user_id', user_id)
                .eq('status', 'paused')
                .execute()
            )
            return len(response.data) if response.data else 0
        except Exception as e:
            print(f"Error resuming applications: {e}")
            return 0

    async def get_job_urls(self, category_id: str = None, status: str = None):
        """Get job URLs, optionally filtered"""
        try:
            query = self.supabase.table('job_urls_master').select('*, job_categories(category_name)')
            
            if category_id:
                query = query.eq('category_id', category_id)
            if status:
                query = query.eq('status', status)
            
            response = query.execute()
            return response.data or []
        except Exception as e:
            print(f"Error getting job URLs: {e}")
            return []

    # Add these methods to your backend/database/connection.py file
# Add at the end of your DatabaseConnection class

    async def get_job_categories(self):
        """Get all job categories"""
        try:
            response = self.supabase.table('job_categories').select('*').eq('is_active', True).execute()
            return response.data or []
        except Exception as e:
            print(f"Error getting job categories: {e}")
            return []
    
    async def create_job_category(self, category_data: dict):
        """Create a new job category"""
        try:
            response = self.supabase.table('job_categories').insert(category_data).execute()
            return response.data[0] if response.data else None
        except Exception as e:
            print(f"Error creating job category: {e}")
            return None
    
    async def get_job_category_by_id(self, category_id: str):
        """Get job category by ID"""
        try:
            response = self.supabase.table('job_categories').select('*').eq('id', category_id).execute()
            return response.data[0] if response.data else None
        except Exception as e:
            print(f"Error getting job category: {e}")
            return None
    
    async def get_job_urls(self, category_id: str = None, status: str = None):
        """Get job URLs, optionally filtered"""
        try:
            query = self.supabase.table('job_urls_master').select('*, job_categories(category_name)')
            
            if category_id:
                query = query.eq('category_id', category_id)
            if status:
                query = query.eq('status', status)
            
            response = query.execute()
            return response.data or []
        except Exception as e:
            print(f"Error getting job URLs: {e}")
            return []
    
    async def create_job_url(self, url_data: dict):
        """Create a new job URL"""
        try:
            response = self.supabase.table('job_urls_master').insert(url_data).execute()
            return response.data[0] if response.data else None
        except Exception as e:
            print(f"Error creating job URL: {e}")
            return None
    
    async def get_users_by_job_category(self, category_id: str) -> List[dict]:
        """Get users who are interested in a specific job category"""
        try:
            if self._is_mock_mode():
                # Mock: return some test users
                return [
                    {"user_id": "user1", "email": "user1@test.com", "category_id": category_id},
                    {"user_id": "user2", "email": "user2@test.com", "category_id": category_id}
                ]
            else:
                # Use the SQL function that we know works (from debug output)
                response = self.supabase.rpc('get_users_by_job_category', {
                    'target_category_id': category_id
                }).execute()
                
                if response.data:
                    # Return in the format expected by trigger_auto_applications
                    return [
                        {
                            'user_id': user['user_id'],
                            'email': user['user_email'],
                            'name': user.get('name', ''),
                            'profile_id': user['profile_id'],
                            'profile_name': user['profile_name']
                        }
                        for user in response.data
                    ]
                else:
                    # Fallback to direct table query
                    response = (
                        self.supabase.table('user_profiles')
                        .select('user_id, id as profile_id, profile_name, users(email, name)')
                        .eq('preferred_job_category_id', category_id)
                        .eq('is_active', True)
                        .execute()
                    )
                    
                    users = []
                    for profile in response.data or []:
                        user_data = profile.get('users')
                        if user_data:
                            users.append({
                                'user_id': profile['user_id'],
                                'email': user_data['email'],
                                'name': user_data.get('name', ''),
                                'profile_id': profile['profile_id'],
                                'profile_name': profile['profile_name']
                            })
                    
                    return users
        except Exception as e:
            print(f"Error getting users by category: {e}")
            import traceback
            traceback.print_exc()
            return []
    async def get_user_default_profile(self, user_id: str):
        """Get user's default profile"""
        try:
            response = (
                self.supabase.table('user_profiles')
                .select('*')
                .eq('user_id', user_id)
                .eq('is_active', True)
                .order('is_default', desc=True)
                .limit(1)
                .execute()
            )
            return response.data[0] if response.data else None
        except Exception as e:
            print(f"Error getting default profile: {e}")
            return None
    
    async def get_admin_stats(self):
        """Get admin dashboard statistics"""
        try:
            # Call the database function we created
            response = self.supabase.rpc('get_admin_dashboard_stats').execute()
            return response.data or {}
        except Exception as e:
            print(f"Error getting admin stats: {e}")
            # Fallback to manual calculation
            try:
                stats = {}
                
                users_response = self.supabase.table('users').select('id', count='exact').execute()
                stats['total_users'] = users_response.count or 0
                
                categories_response = self.supabase.table('job_categories').select('id', count='exact').execute()
                stats['total_categories'] = categories_response.count or 0
                
                urls_response = self.supabase.table('job_urls_master').select('id', count='exact').execute()
                stats['total_job_urls'] = urls_response.count or 0
                
                # Get application counts by status
                apps_response = self.supabase.table('job_applications').select('status').execute()
                applications = apps_response.data or []
                
                stats['active_applications'] = len([app for app in applications if app['status'] in ['queued', 'processing']])
                stats['completed_applications'] = len([app for app in applications if app['status'] == 'completed'])
                stats['failed_applications'] = len([app for app in applications if app['status'] == 'failed'])
                stats['pending_captchas'] = len([app for app in applications if app['status'] == 'captcha_required'])
                
                return stats
            except Exception as fallback_error:
                print(f"Fallback stats calculation failed: {fallback_error}")
                return {}
    
    async def create_application(self, app_data: dict):
        """Create a new job application"""
        try:
            response = self.supabase.table('job_applications').insert(app_data).execute()
            return response.data[0] if response.data else None
        except Exception as e:
            print(f"Error creating application: {e}")
            return None
    
    async def execute(self, query: str, params: tuple = None):
        """Execute a raw SQL query (simplified version)"""
        try:
            # For now, we'll implement common operations
            if "UPDATE users SET applications_used" in query:
                user_id = params[0] if params else None
                if user_id:
                    response = self.supabase.table('users').update({
                        'applications_used': 'applications_used + 1'
                    }).eq('id', user_id).execute()
                    return response.data
            
            # Add more query patterns as needed
            print(f"Raw query not implemented: {query}")
            return None
        except Exception as e:
            print(f"Error executing query: {e}")
            return None
    
    async def fetch_all(self, query: str, params: tuple = None):
        """Fetch all results from a query"""
        try:
            # Implement common fetch patterns
            if "SELECT" in query and "job_applications" in query:
                response = self.supabase.table('job_applications').select('*').execute()
                return response.data or []
            
            print(f"Fetch query not implemented: {query}")
            return []
        except Exception as e:
            print(f"Error fetching data: {e}")
            return []
    
    async def fetch_one(self, query: str, params: tuple = None):
        """Fetch one result from a query"""
        try:
            results = await self.fetch_all(query, params)
            return results[0] if results else None
        except Exception as e:
            print(f"Error fetching one: {e}")
            return None

    # Analytics operations
    async def get_user_stats(self, user_id: str) -> dict:
        """Get user application statistics"""
        # Get application counts by status
        apps_response = (
            self.supabase.table('job_applications')
            .select('status')
            .eq('user_id', user_id)
            .execute()
        )
        
        applications = apps_response.data or []
        
        stats = {
            'total_applications': len(applications),
            'queued': len([app for app in applications if app['status'] == 'queued']),
            'processing': len([app for app in applications if app['status'] == 'processing']),
            'completed': len([app for app in applications if app['status'] == 'completed']),
            'failed': len([app for app in applications if app['status'] == 'failed']),
            'captcha_required': len([app for app in applications if app['status'] == 'captcha_required'])
        }
        
        # Calculate success rate
        if stats['total_applications'] > 0:
            stats['success_rate'] = (stats['completed'] / stats['total_applications']) * 100
        else:
            stats['success_rate'] = 0
        
        return stats

# Create global database instance
    async def get_all_users(self, category_id: Optional[str] = None) -> List[dict]:
        """Get all users, optionally filtered by job category preference"""
        try:
            if self._is_mock_mode():
                # Mock implementation
                return [
                    {"id": "user1", "email": "user1@test.com", "name": "Test User 1"},
                    {"id": "user2", "email": "user2@test.com", "name": "Test User 2"}
                ]
            else:
                if category_id:
                    print(f"🔍 Getting users for category: {category_id}")
                    
                    # Use the same approach that works for get_users_by_job_category
                    users_with_category = await self.get_users_by_job_category(category_id)
                    
                    # Convert to the format expected by the API
                    result = []
                    seen_users = set()
                    
                    for user in users_with_category:
                        user_id = user['user_id']
                        if user_id not in seen_users:
                            result.append({
                                'id': user_id,
                                'email': user['email'],
                                'name': user.get('name', ''),
                                'subscription_plan': 'free'  # Default value
                            })
                            seen_users.add(user_id)
                    
                    print(f"✅ Found {len(result)} users with category preference")
                    return result
                else:
                    response = self.supabase.table('users').select('id, email, name, subscription_plan').execute()
                    return response.data or []
        except Exception as e:
            print(f"Error getting all users: {e}")
            import traceback
            traceback.print_exc()
            return []

    async def get_admin_stats(self) -> dict:
        """Get admin statistics with proper error handling"""
        try:
            if self._is_mock_mode():
                return {
                    "total_users": 2,
                    "total_applications": 5,
                    "pending_applications": 2,
                    "completed_applications": 3,
                    "pending_captchas": 0
                }
            else:
                # Get user count
                users_response = self.supabase.table('users').select('id', count='exact').execute()
                total_users = users_response.count or 0
                
                # Get application stats
                apps_response = self.supabase.table('job_applications').select('status', count='exact').execute()
                total_applications = apps_response.count or 0
                
                # Get status breakdown
                pending_response = self.supabase.table('job_applications').select('id', count='exact').eq('status', 'queued').execute()
                pending_applications = pending_response.count or 0
                
                completed_response = self.supabase.table('job_applications').select('id', count='exact').eq('status', 'completed').execute()
                completed_applications = completed_response.count or 0
                
                captcha_response = self.supabase.table('captcha_sessions').select('id', count='exact').eq('status', 'pending').execute()
                pending_captchas = captcha_response.count or 0
                
                return {
                    "total_users": total_users,
                    "total_applications": total_applications,
                    "pending_applications": pending_applications,
                    "completed_applications": completed_applications,
                    "pending_captchas": pending_captchas
                }
        except Exception as e:
            print(f"Error getting admin stats: {e}")
            return {
                "total_users": 0,
                "total_applications": 0,
                "pending_applications": 0,
                "completed_applications": 0,
                "pending_captchas": 0
            }

    async def get_job_urls(self, category_id: Optional[str] = None, status: Optional[str] = None) -> List[dict]:
        """Get job URLs with proper category name joining"""
        try:
            if self._is_mock_mode():
                return [
                    {
                        "id": "url1",
                        "category_id": category_id or "cat1",
                        "category_name": "Cybersecurity",
                        "job_url": "https://example.com/job1",
                        "job_title": None,
                        "company_name": None,
                        "status": "active",
                        "created_at": "2025-01-01T00:00:00"
                    }
                ]
            else:
                # Build query with proper joins
                query = (
                    self.supabase.table('job_urls_master')
                    .select('*, job_categories(category_name)')
                )
                
                if category_id:
                    query = query.eq('category_id', category_id)
                if status:
                    query = query.eq('status', status)
                
                response = query.execute()
                
                # Flatten the response to match expected format
                formatted_urls = []
                for url_data in response.data or []:
                    category_info = url_data.pop('job_categories', {})
                    url_data['category_name'] = category_info.get('category_name') if category_info else None
                    formatted_urls.append(url_data)
                
                return formatted_urls
        except Exception as e:
            print(f"Error getting job URLs: {e}")
            return []

db = DatabaseConnection()