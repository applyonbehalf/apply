# bot/enhanced_browser_handler.py - SIMPLIFIED WORKING VERSION
import time
import random
import os
import uuid
import asyncio
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, TimeoutException
from typing import Dict, List, Optional, Any
from datetime import datetime

class EnhancedBrowserHandler:
    """Simplified enhanced browser handler that actually works"""
    
    def __init__(self, user_id: str = None, headless: bool = False):
        self.user_id = user_id
        self.headless = headless
        self.driver = None
        self.wait = None
        self.session_id = str(uuid.uuid4())
        self.current_application_id = None
        self.current_url = None
        
        # Stats tracking
        self.session_stats = {
            'applications_processed': 0,
            'applications_successful': 0,
            'applications_failed': 0,
            'captchas_encountered': 0,
            'session_start': datetime.utcnow()
        }
        
        print(f"ü§ñ Initializing browser handler for session {self.session_id[:8]}")
        self._setup_browser()
    
    def _setup_browser(self):
        """Setup browser with simplified, working configuration"""
        options = webdriver.ChromeOptions()
        
        # Headless mode setting
        if self.headless:
            options.add_argument("--headless")
            print(f"üîá Browser running in headless mode")
        else:
            print(f"üëÅÔ∏è Browser running in visible mode")
        
        # Essential options only
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        
        try:
            # Use the path that worked in our tests
            driver_path = '/opt/homebrew/bin/chromedriver'
            
            if os.path.exists(driver_path):
                service = ChromeService(executable_path=driver_path)
                print(f"‚úÖ Using ChromeDriver at: {driver_path}")
            else:
                service = ChromeService()  # Let it find automatically
                print("‚úÖ Using system ChromeDriver")
            
            self.driver = webdriver.Chrome(service=service, options=options)
            
            # Anti-detection script
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            # Set window size
            if not self.headless:
                self.driver.maximize_window()
            else:
                self.driver.set_window_size(1920, 1080)
            
            self.wait = WebDriverWait(self.driver, 15)
            print(f"‚úÖ Browser initialized successfully for session {self.session_id[:8]}")
            
        except Exception as e:
            print(f"‚ùå Error initializing browser: {e}")
            raise Exception(f"Browser initialization failed: {e}")
    
    async def navigate_to_job(self, job_url: str, application_id: str) -> bool:
        """Navigate to a job application page"""
        try:
            self.current_application_id = application_id
            self.current_url = job_url
            
            print(f"üåê Navigating to: {job_url}")
            self.driver.get(job_url)
            
            # Wait for page load
            await asyncio.sleep(3)
            
            print(f"‚úÖ Successfully navigated to job page")
            return True
            
        except Exception as e:
            print(f"‚ùå Navigation error: {e}")
            return False
    
    async def check_for_captcha(self) -> Optional[Dict[str, Any]]:
        """Simple CAPTCHA detection"""
        try:
            print("üîç Checking for CAPTCHA...")
            
            # Check for reCAPTCHA response token (indicates solved)
            try:
                response_element = self.driver.find_element(By.CSS_SELECTOR, '[name="g-recaptcha-response"]')
                response_value = response_element.get_attribute('value')
                if response_value and len(response_value) > 10:
                    print(f"‚úÖ CAPTCHA already solved (token length: {len(response_value)})")
                    return None  # CAPTCHA is solved
            except:
                pass
            
            # Check for CAPTCHA iframe
            try:
                iframe = self.driver.find_element(By.CSS_SELECTOR, 'iframe[src*="recaptcha"]')
                if iframe.is_displayed():
                    # Take screenshot
                    screenshot_path = await self._take_captcha_screenshot()
                    
                    print(f"üö® CAPTCHA detected - manual solving required")
                    return {
                        'type': 'recaptcha',
                        'screenshot_url': screenshot_path,
                        'page_url': self.driver.current_url,
                        'detected_at': datetime.utcnow().isoformat()
                    }
            except:
                pass
            
            print("‚úÖ No CAPTCHA detected")
            return None
            
        except Exception as e:
            print(f"‚ùå CAPTCHA check error: {e}")
            return None
    
    async def _take_captcha_screenshot(self) -> str:
        """Take a screenshot for CAPTCHA solving"""
        try:
            # Create screenshots directory
            screenshot_dir = os.path.join(os.getcwd(), 'captcha_screenshots')
            os.makedirs(screenshot_dir, exist_ok=True)
            
            # Generate filename
            timestamp = datetime.utcnow().strftime('%Y%m%d_%H%M%S')
            filename = f"captcha_{self.session_id[:8]}_{timestamp}.png"
            filepath = os.path.join(screenshot_dir, filename)
            
            # Take screenshot
            self.driver.save_screenshot(filepath)
            print(f"üì∏ CAPTCHA screenshot saved: {filepath}")
            
            return filepath
            
        except Exception as e:
            print(f"‚ùå Screenshot error: {e}")
            return None
    
    async def wait_for_captcha_solution(self, captcha_info: Dict[str, Any], timeout: int = 300) -> bool:
        """Wait for manual CAPTCHA solution with user interaction"""
        try:
            print(f"‚è≥ CAPTCHA DETECTED - Manual solving required")
            print(f"üì∏ Screenshot: {captcha_info.get('screenshot_url', 'N/A')}")
            print(f"")
            print(f"üîî PLEASE SOLVE THE CAPTCHA IN THE BROWSER WINDOW")
            print(f"   1. Look at the browser window")
            print(f"   2. Click the 'I'm not a robot' checkbox")
            print(f"   3. Complete any image challenges if they appear")
            print(f"   4. Wait for the green checkmark")
            print(f"")
            print(f"‚è∞ Bot will check every 10 seconds for up to {timeout//60} minutes...")
            
            start_time = time.time()
            check_interval = 10  # Check every 10 seconds
            
            while time.time() - start_time < timeout:
                await asyncio.sleep(check_interval)
                
                # Check if CAPTCHA is solved
                current_captcha = await self.check_for_captcha()
                
                if not current_captcha:
                    print("‚úÖ CAPTCHA solved! Continuing with application...")
                    return True
                
                elapsed = int(time.time() - start_time)
                print(f"‚è≥ Still waiting for CAPTCHA solution... ({elapsed}s elapsed)")
            
            print("‚è∞ Timeout waiting for CAPTCHA solution")
            return False
            
        except Exception as e:
            print(f"‚ùå Error waiting for CAPTCHA solution: {e}")
            return False
    
    async def scan_form_elements(self, skip_captcha_check: bool = False) -> List[Dict[str, Any]]:
        """Scan form elements (simplified version)"""
        try:
            # Check for CAPTCHA first unless skipped
            if not skip_captcha_check:
                captcha_info = await self.check_for_captcha()
                if captcha_info:
                    print("üö® CAPTCHA detected - returning CAPTCHA info")
                    return [{'__captcha_detected__': True, 'captcha_info': captcha_info}]
            
            print("üìã Scanning form elements...")
            
            # Simple form scanning
            inputs = self.driver.find_elements(By.CSS_SELECTOR, "input, textarea, select")
            form_fields = []
            
            for element in inputs:
                if not element.is_displayed():
                    continue
                
                field_type = element.get_attribute('type') or 'text'
                
                # Skip certain types
                if field_type in ['hidden', 'submit', 'button']:
                    continue
                
                field_data = {
                    'element': element,
                    'type': field_type,
                    'name': element.get_attribute('name') or element.get_attribute('id') or '',
                    'label': element.get_attribute('placeholder') or 'Unknown field',
                    'required': element.get_attribute('required') is not None
                }
                
                form_fields.append(field_data)
            
            print(f"üìã Found {len(form_fields)} form fields")
            return form_fields
            
        except Exception as e:
            print(f"‚ùå Form scanning error: {e}")
            return []
    
    async def submit_application(self) -> Dict[str, Any]:
        """Submit the application using enhanced button detection"""
        try:
            print("üöÄ Attempting to submit application...")
            
            # Use the enhanced submit button finder
            submit_success = await self.find_submit_button()
            
            if submit_success:
                # Check for success indicators after submission
                await asyncio.sleep(3)
                
                # Look for success messages
                page_source = self.driver.page_source.lower()
                success_indicators = [
                    'thank you',
                    'success',
                    'submitted',
                    'received',
                    'confirmation',
                    'complete'
                ]
                
                for indicator in success_indicators:
                    if indicator in page_source:
                        return {
                            'success': True,
                            'message': f'Application submitted successfully (detected: {indicator})',
                            'final_url': self.driver.current_url
                        }
                
                # If no explicit success indicator, assume success if no error
                return {
                    'success': True,
                    'message': 'Application submitted (submit button clicked successfully)',
                    'final_url': self.driver.current_url
                }
            else:
                return {
                    'success': False,
                    'error': 'Could not find or click submit button'
                }
                
        except Exception as e:
            return {
                'success': False,
                'error': f'Submission error: {str(e)}'
            }
    
    
    async def fill_field(self, field_data: Dict[str, Any], value: Any) -> bool:
        """Fill a form field with the given value"""
        try:
            element = field_data['element']
            field_type = field_data.get('type', 'text')
            field_label = field_data.get('label', 'Unknown')
            
            print(f"üìù Filling field '{field_label}' with: {value}")
            
            # Scroll to element
            self.driver.execute_script("arguments[0].scrollIntoView(true);", element)
            await asyncio.sleep(0.5)
            
            if field_type in ['text', 'email', 'tel', 'url', 'search']:
                # Text input
                element.clear()
                element.send_keys(str(value))
                
            elif field_type == 'textarea':
                # Textarea
                element.clear()
                element.send_keys(str(value))
                
            elif field_type == 'select-one':
                # Dropdown
                from selenium.webdriver.support.ui import Select
                select = Select(element)
                
                # Try to select by visible text first
                try:
                    select.select_by_visible_text(str(value))
                except:
                    # If that fails, try by value
                    try:
                        select.select_by_value(str(value))
                    except:
                        # If both fail, select first non-empty option
                        options = [opt for opt in select.options if opt.text.strip() and opt.text.strip() != '--']
                        if options:
                            select.select_by_visible_text(options[0].text)
                            
            elif field_type == 'checkbox':
                # Checkbox - check if value is truthy
                if value and str(value).lower() not in ['false', 'no', '0', '']:
                    if not element.is_selected():
                        element.click()
                else:
                    if element.is_selected():
                        element.click()
                        
            elif field_type == 'radio':
                # Radio button - click if this is the selected value
                if str(value).lower() in field_label.lower():
                    element.click()
                    
            elif field_type == 'file':
                # File upload
                if value and os.path.exists(str(value)):
                    element.send_keys(str(value))
                    
            print(f"‚úÖ Successfully filled field '{field_label}'")
            return True
            
        except Exception as e:
            print(f"‚ùå Error filling field '{field_label}': {e}")
            return False
    
    async def find_submit_button(self) -> bool:
        """Find and click the submit button with better detection"""
        try:
            print("üîç Looking for submit button...")
            
            # Enhanced submit button selectors
            submit_selectors = [
                # Direct submit buttons
                'button[type="submit"]',
                'input[type="submit"]',
                
                # Buttons with submit-related text
                'button:contains("SUBMIT")',
                'button:contains("Submit")',
                'button:contains("APPLY")',
                'button:contains("Apply")',
                'button:contains("Send")',
                'button:contains("Continue")',
                
                # Elements with submit-related classes
                '*[class*="submit"]',
                '*[class*="apply"]',
                '*[class*="send"]',
                
                # Buttons with submit-related IDs
                '*[id*="submit"]',
                '*[id*="apply"]',
                
                # Any button that might be a submit
                'button',
                'input[type="button"]'
            ]
            
            submit_button = None
            
            for selector in submit_selectors:
                try:
                    buttons = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    
                    for button in buttons:
                        if not button.is_displayed() or not button.is_enabled():
                            continue
                        
                        # Check button text
                        button_text = button.text.strip().lower()
                        button_value = (button.get_attribute('value') or '').strip().lower()
                        button_class = (button.get_attribute('class') or '').strip().lower()
                        button_id = (button.get_attribute('id') or '').strip().lower()
                        
                        # Submit keywords
                        submit_keywords = ['submit', 'apply', 'send', 'continue', 'next']
                        
                        # Check if this looks like a submit button
                        is_submit = (
                            any(keyword in button_text for keyword in submit_keywords) or
                            any(keyword in button_value for keyword in submit_keywords) or
                            any(keyword in button_class for keyword in submit_keywords) or
                            any(keyword in button_id for keyword in submit_keywords) or
                            button.get_attribute('type') == 'submit'
                        )
                        
                        if is_submit:
                            submit_button = button
                            print(f"‚úÖ Found submit button: '{button_text or button_value}' (class: {button_class})")
                            break
                    
                    if submit_button:
                        break
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è Error with selector {selector}: {e}")
                    continue
            
            if submit_button:
                # Scroll to submit button
                self.driver.execute_script("arguments[0].scrollIntoView(true);", submit_button)
                await asyncio.sleep(1)
                
                # Click submit button
                submit_button.click()
                print("‚úÖ Submit button clicked!")
                
                # Wait for submission to process
                await asyncio.sleep(3)
                
                return True
            else:
                print("‚ùå No submit button found")
                
                # Debug: Show all buttons on page
                all_buttons = self.driver.find_elements(By.CSS_SELECTOR, 'button, input[type="submit"], input[type="button"]')
                print(f"üîç Found {len(all_buttons)} total buttons on page:")
                
                for i, btn in enumerate(all_buttons[:10]):  # Show first 10
                    if btn.is_displayed():
                        text = btn.text.strip() or btn.get_attribute('value') or 'No text'
                        btn_class = btn.get_attribute('class') or 'No class'
                        print(f"   {i+1}. '{text}' (class: {btn_class})")
                
                return False
                
        except Exception as e:
            print(f"‚ùå Error finding submit button: {e}")
            return False

    def close(self):
        """Close the browser"""
        try:
            if self.driver:
                self.driver.quit()
                print(f"üîí Browser session {self.session_id[:8]} closed")
        except Exception as e:
            print(f"‚ö†Ô∏è Error closing browser: {e}")
    
    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()
